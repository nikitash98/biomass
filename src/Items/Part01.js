/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.12 public/Part_01.glb
*/

import React, { useRef } from 'react'
import { useGLTF, useAnimations, Html, Image } from '@react-three/drei'
import { playAnimations, setAnimationTime } from '../3D_Components/AnimationUtilities'
import { useEffect } from 'react'
import { useFrame } from 'react-three-fiber'
import slides from "../slides.json"
import { lerp } from 'three/src/math/MathUtils'
import data from '../Overlay/data.json';
import * as THREE from 'three'


export function Part01(props) {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('Part01.glb')
  const { actions } = useAnimations(animations, group)
  const animationTime = useRef(0)
  const testRef = useRef()
  const original_materials = useRef({})
  let previousCounter = useRef(0)
  const imageRef_one = useRef()
  const imageRef_two = useRef()
  const hiddenClass = false ? 'box_name hidden' : "box_name ";
  const hiddenArtificial = "box_name artificial_name"
  const percentage_of_animation_played = useRef(0)
  let highlighted = slides[props.counter]["highlighted"]
  let divRefs = props.divRefs
  let quantities = slides[props.counter]["quantities"]

  const transp_material = new THREE.MeshStandardMaterial({color: 0x626967, opacity: 0.5, transparent: true})

  let animationSpeed = 50.8

  let click_var = 1.0

  const set_views = {
    "tree": [11],
    "boxes": [12, 13, 14, 15, 16, 17, 18, 19, 20, ],
    "rising_boxes": [23,24],
    "end_view": [32,31,30]

    }



  if(props.counter == 24) {
    animationSpeed = 3
  }
  let boxes = Object.keys(data)

  boxes = boxes.filter(function (box_name) {
    return box_name !== 'Animals';
  });


  let artificialBoxes = ["Cars", "Bricks","Metals","Asphalt","Aggregates", "Concrete", "Plastics"]
  let title_positions = {
    "Annelids": [-0.3, .3, .3],
    "Arthropods": [-0.3, .3, .3],
    "Animals": [1.2, 1, 1.2],
    "Plants": [+1.2, +1, +1.2],
    "LUCA": [-1, -1, 0.9],
    "Virus": [-.3, 0.31, 0.3],
    "Protists": [+.75, 1, .8],
    "Bacteria": [-2, 2.2, 2.1],
    "Fungi": [1.2, 1, 1],
    "Archaea": [-1, 1, 1],
    "Cnidarians": [-.3, .3, .32],
    "Fish": [-.5, .5, -.5],
    "Humans": [-.2, .2, .2],
    "Livestock": [-.3, .3, .25],
    "Marine_Arthropods": [-.5, .7, .5],
    "Mollusks": [-.3, .5, .3],
    "Nematodes": [-.3, .1, .2],
    "Wild_Birds": [0.0, .3, .2],
    "Wild_Mammals": [-0.2, .2, .2],
    "Concrete": [.5, -.5, .5],
    "Bricks": [.5, -.5, .5],
    "Cars": [.5, -.5, .5],
    "Metals": [.5, -.5, .5],
    "Aggregates": [.5, -.5, .5],
    "Asphalt": [.5, -.5, .5],
    "Plastics": [.5, -.5, .5]
  }


  let weight_positions = {
    "Annelids": [0, 0, -.4],
    "Arthropods": [0, 0, -.4],
    "Animals": [-1.3, 0, 0],
    "Plants": [-1.3, 0, 0],
    "LUCA": [0, 1.5, 0],
    "Virus": [0, 0, -.4],
    "Protists": [-1, 0, 0],
    "Bacteria": [0, 0, -2.6],
    "Fungi": [-1.3, 0, 0],
    "Archaea": [0, 0, -1.4],
    "Cnidarians": [0, 0, -.4],
    "Fish": [0.7, 0, 0],
    "Humans": [0, 0, -.4],
    "Livestock": [0, 0, -.4],
    "Marine_Arthropods":[0, 0, -.6],
    "Mollusks": [0, 0, -.4] ,
    "Nematodes":[0, 0, -.4],
    "Wild_Birds": [0, 0, -.4],
    "Wild_Mammals": [0, 0, -.4],
    "Concrete": [0, 0.6, 0],
    "Bricks": [0, 0.6, 0],
    "Cars": [0, 0.6, 0],
    "Metals": [0, 0.6, 0],
    "Aggregates":[0, 0.6, 0],
    "Asphalt": [0, 0.6, 0],
    "Plastics": [0, 0.6, 0]
  }


  const flatten_name = (entry_name) => {
    return entry_name.replace(/ /g,"_")
  }


  const quant_value = useRef(0)
  const asphalt_value = useRef(0)
  const metal_value = useRef(0)
  const brick_value = useRef(0)
  const aggregate_value = useRef(0)
  const concrete_value = useRef(0)

  const artificial_values = useRef({
    "Asphalt": 0,
    "Metals": 0,
    "Concrete": 0,
    "Aggregates": 0,
    "Bricks": 0,
    "Plastics": 0

  })




  const animal_click = () => {
    if(set_views["boxes"].includes(props.counter)) {
      props.setCounter(props.counter + 1)
    }
    if(props.counter == 2) {
      props.setCounter(props.counter + 1)
    }
  }

  const rise_percentage = (value) => {
    let start_time = slides[23]["animationTime"]
    let end_time = slides[24]["animationTime"]
    let length = end_time - start_time
    let cur_value = value - start_time
    let perc = cur_value/length
    return perc
  }

  const flatYear = (value) => {
    let perc = rise_percentage(value)
    return Math.max(Math.min(1900 + Math.round(120 * perc), 2020),1900)
  }

  const exponentialLaw = (a, b, x) => {
    return a * Math.pow(b, x)
  }
  const e_square_function = (a, b, c, x) => {
    return a * Math.pow(Math.E, b * Math.pow((x + c), 2))
  }
  useEffect( () =>{
    playAnimations(actions)
    setAnimationTime(actions, slides[props.counter]["animationTime"])
  }, [])

  useFrame(({clock, delta})=> {

   if(previousCounter.current != props.counter) {
    let anim_length = Math.abs(slides[props.counter]["animationTime"] - slides[previousCounter.current]["animationTime"])
    percentage_of_animation_played.current += animationSpeed/anim_length * clock.getDelta()

    animationTime.current = lerp(slides[previousCounter.current]["animationTime"], slides[props.counter]["animationTime"], Math.min(percentage_of_animation_played.current, 1))

    setAnimationTime(actions, animationTime.current)

    if(percentage_of_animation_played.current >= 1.0) {
      previousCounter.current = props.counter
      percentage_of_animation_played.current = 0
    }
   }

   if(props.counter == 2 || props.counter == 12) {
    imageRef_one.current.material.opacity = (Math.abs(Math.sin(clock.getElapsedTime() * 3))) * 0.2 + 0.8;
    imageRef_two.current.material.opacity = (Math.abs(Math.sin(clock.getElapsedTime() * 3))) * 0.2 + 0.8;
   }


    if(set_views["rising_boxes"].includes(props.counter)) {
      props.setYearPercentage(flatYear(animationTime.current))
      quant_value.current = rise_percentage(animationTime.current)
      artificial_values.current["Concrete"] = e_square_function(71971.169, -0.149, -8.720, rise_percentage(animationTime.current) * 2 + 1)
      artificial_values.current["Aggregates"] = e_square_function(815.706, -0.227, -4.816, rise_percentage(animationTime.current) * 2 + 1)
      artificial_values.current["Bricks"] = e_square_function(15.258, 0.315, -0.612, rise_percentage(animationTime.current) * 2 + 1)
      artificial_values.current["Metals"] = e_square_function(121.671, -0.184, -5.488, rise_percentage(animationTime.current) * 2 + 1)
      artificial_values.current["Asphalt"] = e_square_function(65.102, -1.004, -3.040, rise_percentage(animationTime.current) * 2 + 1)
      artificial_values.current["Plastics"] = e_square_function(11.000, -1.720, -3.238, rise_percentage(animationTime.current) * 2 + 1)

    }
  })


  if(set_views["tree"].includes(props.counter)) {
    title_positions["Fungi"] = [1.2, 1, -0.5]

  }
  if(set_views["boxes"].includes(props.counter)) {
    title_positions["Plants"] = [-1.25, +1, +1.2]
    title_positions["Protists"] = [-1.25, +1, -1]
    title_positions["Animals"] = [1.25, +1, -1.5]

  }

  if(set_views["rising_boxes"].includes(props.counter)) {
    title_positions["Metals"] =[-0.4, 0.7, 0]
    title_positions["Asphalt"] =[-0.4, 0.7, 0]
    title_positions["Bricks"] =[-0.4, 0.7, 0]
    title_positions["Aggregates"] =[-0.4, 0.7, 0]
    title_positions["Concrete"] =[-0.3, 0.7, 0]
    title_positions["Plastics"] =[-0.4, 0.7, 0]

  }

  if(set_views["end_view"].includes(props.counter)) {
    title_positions["Plastics"] =[-0.4, 0.7, 0]
    title_positions["Metals"] =[-0.4, 0.7, 0]
    title_positions["Asphalt"] =[-0.4, 0.7, 0]
    title_positions["Bricks"] =[-0.4, 0.7, 0]
    title_positions["Plants"] = [-1.35, +1, +1.2]
    title_positions["Protists"] = [-1.25, +1, -1]
    title_positions["Fungi"] = [0.35, +1, -2.2]

  }

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
    {boxes.map((name, i) => {
        let flat_name = flatten_name(name)
        let currentClass = hiddenClass
        let icon_mat = materials.Icons
        if(artificialBoxes.includes(name)) {
          currentClass = hiddenArtificial
          icon_mat = materials["Material.008"]
        }

        let human_title = name
        if(name == "Humans" && props.counter == 30) {
          human_title = "All Humans"
        } 
        let weight_val = data[name].weight

        if(Object.keys(artificial_values.current).includes(name) &&
        set_views["rising_boxes"].includes(props.counter)){
          weight_val = Math.round(artificial_values.current[name])
        }
        
        return (
            <mesh name = {flat_name} geometry={nodes[flat_name].geometry} key = {i}
            material = {highlighted.includes(name) ? transp_material : nodes[flat_name].material}
             position = {nodes[flat_name].position}
            rotation = {nodes[flat_name].rotation}
             frustumCulled = {false}
            onPointerOver = {props.handleHover} onPointerOut = {props.handleUnhover}

            ref = {ref => divRefs.current[name] = ref} 
            >
          <mesh name={flat_name + "_Icon"} geometry={nodes[flat_name + "_Icon"].geometry} material={icon_mat} 
          position={nodes[flat_name + "_Icon"].position} rotation={nodes[flat_name + "_Icon"].rotation} scale={nodes[flat_name + "_Icon"].scale} />
            <Html 
                style={{
                  transition: 'all 0.2s',
                  transform: 'translate(-50%, -100%)'
                }}

                zIndexRange={[100, 100]}
                position = {weight_positions[flat_name]}
                className= {(props.hovered.includes(name) || quantities.includes(name)) ? "box_value" : "box_value hide_box"} 
                >
                <h1>{weight_val} Gt </h1>
            </Html>


            <Html position = {title_positions[flat_name]} 
            zIndexRange={[0, 20]}
            className={currentClass}>
                <h1>{human_title}</h1>
            </Html>


            </mesh>       
            

            
        )
    })}


    <mesh name="Animals"
    onPointerOver = {props.handleHover} onPointerOut = {props.handleUnhover}
    frustumCulled = {false}

    material = {highlighted.includes("Animals") ? transp_material : materials.Animals}
    onClick={animal_click}
    ref = {ref => divRefs.current["Animals"] = ref} 

    geometry={nodes.Animals.geometry} position={[0.726, 1.751, 0.96]} rotation={[Math.PI / 2, -Math.PI / 2, 0]} scale={0.629}>
      <mesh name="Cube002" geometry={nodes.Cube002.geometry} material={materials['Material.001']} position={[-1.103, 0.003, 0.967]} rotation={[Math.PI, 0, 1.57]} scale={[1.037, 0.016, 0.493]} />
      <mesh name="Cube003" geometry={nodes.Cube003.geometry} material={materials['Material.001']} position={[-1.117, 0.003, -1.005]} rotation={[0, 0, -1.57]} scale={[0.998, 0.016, 0.493]} />
      <mesh name="Animals_Icon" geometry={nodes.Animals_Icon.geometry} material={materials.Icons} position={[-0.033, 1.192, -0.03]} rotation={[0, Math.PI / 2, 0]} scale={[1.141, 0.471, 0.256]} />
    </mesh>

    <mesh name="Plane001" geometry={nodes.Plane001.geometry} material={materials.Tree} position={[1.25, -4.05, 1.44]} rotation={[Math.PI / 2, 0, 0]} scale={[6.68, 3.04, 3.05]} />
    <mesh name="Plane"  geometry={nodes.Plane.geometry} material={materials.Rollout} position={[1.84, 17.04, -20.72]} rotation={[Math.PI / 2, 0, 0]} scale={0.72} />
    {(props.counter == 2 || props.counter == 12) && (
      <>
      <Image ref={imageRef_one} transparent {...props} position={props.counter == 12 ? [-1.5, 2.0, 12]:[-1, 1.5, 0] } scale={1.0} url="Icon/double_arrow.png"/>
      <Image ref={imageRef_two} transparent {...props} rotation = {[0, 0, Math.PI]} position={props.counter == 12 ? [2,2.0, 12]:[2, 1.5, 0]} scale={1.0} url="Icon/double_arrow.png"/>
      </>
    )



    }

      </group>
    </group>
  )
}

useGLTF.preload('Part01.glb')
