/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 .\\public\\Biomass_animation.glb
*/

import React, { useRef , useState, useEffect, Suspense} from 'react'
import { Html, useGLTF, PerspectiveCamera, useAnimations } from '@react-three/drei'
import useMousePosition from '../useMousePosition'
import * as THREE from 'three'
import { act } from 'react-dom/test-utils'
import { useFrame, useThree } from 'react-three-fiber'
import { Selection, Select, EffectComposer, Outline } from '@react-three/postprocessing'
import slides from "../slides.json"
import { lerp } from 'three/src/math/MathUtils'
import Particles from './Particles'


function Anim(props) {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('Biomass_animation_v02.glb')
  const { viewport } = useThree();

  const { actions, mixer } = useAnimations(animations, group)
  let stop_times = [0.1,1, 2.9]
  let names = []
  for(let i = 0; i < animations.length; i++){
    names.push(animations[i].name)
  }

  const current_counter = useRef(0);
  const globeRef = useRef()

  let highlighted = slides[props.counter]["highlighted"]
  let quantities = slides[props.counter]["quantities"]


  const handleHover = (e) => {
      e.stopPropagation()
      console.log(e.object)
      //setprops.hovered(true)

      if(!e.object.parent.isGroup) {
        props.setSelectionSet([e.object.parent])
      } else {
        props.setSelectionSet([e.object])

      }
      document.body.style.cursor = 'pointer';
      let name = e.eventObject.name
      if(name == "Wild_Mammals") {
        name = "Wild Mammals"
      }
      if(name == "Marine_Arthropods") {
        name = "Marine Arthropods"
      }
      if(name == "Wild_Birds") {
        name = "Wild Birds"
      }

      props.setHovered(name)

      /*
      var original_vectory = e.eventObject.position.clone()
      var vector = original_vectory.project(props.camRef.current)

      vector.x = (vector.x + 1) / 2 * window.innerWidth;
      vector.y = -(vector.y - 1) / 2 * window.innerHeight;
      */

  }
  const [curTime, setcurTime] = useState(0);
  //const plant_material = new THREE.MeshBasicMaterial()
  //plant_material.color = 'red'
  //const plant_material = materials.Plants
  const plant_material = new THREE.MeshStandardMaterial({color: 0x626967, opacity: 0.5, transparent: true})
  
  
  const handleUnhover = (e) => {
    props.setSelectionSet([])
    document.body.style.cursor = 'auto';
    props.setHovered(null)

    props.setInfoPage(null)
  }

  const setAnimationTime = (value) => {
    for(let i = 0; i<names.length;i++){
      actions[names[i]].time = value;
      actions[names[i]].paused = true;
    }   
  }
  useEffect( () =>{
    console.log("IN HERE NOW")
    playAnimations()
  }, [])
  const playAnimations = () => {
    for(let i = 0; i<names.length;i++){
      actions[names[i]].play();
      actions[names[i]].paused = false;
    }
  }

  //setAnimationTime(slides[props.counter]["animationTime"])
  
  
  const lerp = (start, end, t) => {
    return (1 - t) * start + t * end;
  }
  /*
  if(actions != null && actions["Animals"] != undefined){
    
    setAnimationTime(slides[props.counter]["animationTime"])

  }
  */
  useFrame((state, delta)=> {
    setcurTime(lerp(curTime, slides[props.counter]["animationTime"], 0.05))
    setAnimationTime(curTime)
    if(props.counter < 2) {
      globeRef.current.rotation.z -= 0.01

    }
  })
  /*
  useFrame((state, delta)=> {
    if(props.counter < 2) {
      globeRef.current.rotation.z -= 0.01
    }
  })
  */

  const hiddenClass = false ? 'box_name hidden' : "box_name ";

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
      <Suspense>
        
      </Suspense>
      <Particles curTime = {curTime}/>



        <mesh name="Annelids" geometry={nodes.Annelids.geometry} material={highlighted.includes("Annelids") ? plant_material : materials.Bacteria} position={[-0.08, -100, -0.06]} rotation={[Math.PI / 2, 0, 0]} onPointerOver = {handleHover} onPointerOut = {handleUnhover}>
          <mesh name="Artboard_4_copy_7@3x" geometry={nodes['Artboard_4_copy_7@3x'].geometry} material={materials.Icons} position={[-0.02, 0.32, 0.01]} scale={-0.84} />
          <Html position = {[-0.3, .3, .3]} className={hiddenClass}><h1>Annelids</h1></Html>
          {props.hovered == "Annelids" && 
          <Html center = {true} position = {[0, 0, -.8]} className="box_value"><h1>0.2 Gt C</h1></Html>
          }
        </mesh>
        <mesh name="Arthropods" geometry={nodes.Arthropods.geometry} material={highlighted.includes("Arthropods") ? plant_material : materials.Bacteria} position={[0.16, -100, -0.06]} rotation={[Math.PI / 2, 0, 0]} onPointerOver = {handleHover} onPointerOut = {handleUnhover}>
          <mesh name="Artboard_4_copy_8@3x" geometry={nodes['Artboard_4_copy_8@3x'].geometry} material={materials.Icons} position={[0, 0.31, 0.01]} scale={0.79} />
          <Html position = {[-0.3, .3, .3]} className={hiddenClass}><h1>Arthropods</h1></Html>
          {(props.hovered == "Arthropods" || quantities.includes("Arthropods")) && 
          <Html zIndexRange={[0, 100]} center = {true} position = {[0, 0, -.6]} className="box_value"><h1>0.2 Gt C</h1></Html>
          }
        </mesh>

        <mesh name="Cnidarians" geometry={nodes.Cnidarians.geometry} material={highlighted.includes("Cnidarians") ? plant_material : materials.Bacteria} position={[0, -100, -0.06]} rotation={[Math.PI / 2, 0, 0]} onPointerOver = {handleHover} onPointerOut = {handleUnhover}>
          <mesh zIndexRange={[0,1]} name="Artboard_4_copy_15@3x" geometry={nodes['Artboard_4_copy_15@3x'].geometry} material={materials.Icons} position={[-0.01, 0.26, 0]} scale={0.75} />
          <Html position = {[-.3, .3, .2]} className={hiddenClass}><h1>Cnidarians</h1></Html>
          {props.hovered == "Cnidarians" && 
          <Html center = {true} position = {[0, 0, -.8]} className="box_value"><h1>0.1 Gt C</h1></Html>
          }
        </mesh>


        <mesh name="Fish" geometry={nodes.Fish.geometry} material={highlighted.includes("Fish") ? plant_material : materials.Bacteria} position={[-0.03, -100, -0.06]} rotation={[Math.PI / 2, Math.PI / 2, 0]} onPointerOver = {handleHover} onPointerOut = {handleUnhover}>
          <mesh name="Artboard_4_copy_5@3x001" geometry={nodes['Artboard_4_copy_5@3x001'].geometry} material={materials.Icons} position={[0.03, 0.46, 0]} rotation={[0, -Math.PI / 2, 0]} scale={0.88} />
          <Html zIndexRange={[0,1]} position = {[-.5, .5, -.5]} className={hiddenClass}><h1>Fish</h1></Html>
          {props.hovered == "Fish" && 
          <Html zIndexRange={[0,100]} center = {true} position = {[1, 0, 0]} className="box_value"><h1>0.7 Gt C</h1></Html>
          }
        </mesh>

        
        <mesh name="Humans" geometry={nodes.Humans.geometry} material={highlighted.includes("Humans") ? plant_material : materials.Bacteria} position={[-0.17, -100, -0.07]} rotation={[Math.PI / 2, 0, 0]} onPointerOver = {handleHover} onPointerOut = {handleUnhover}>
          <mesh name="Artboard_4_copy_10@3x" geometry={nodes['Artboard_4_copy_10@3x'].geometry} material={materials.Icons} position={[0, 0.21, -0.01]} scale={0.71} />
          <Html position = {[-.3, .3, .2]} className={hiddenClass}><h1>Humans</h1></Html>
          {(props.hovered == "Humans" || quantities.includes("Humans")) && 
          <Html center = {true} position = {[0, 0, -.4]} className="box_value"><h1>0.06 Gt C</h1></Html>
          }
        </mesh>

        <mesh name="Livestock" geometry={nodes.Livestock.geometry} material={highlighted.includes("Livestock") ? plant_material : materials.Bacteria} position={[0.29, -100, -0.07]} rotation={[Math.PI / 2, 0, 0]} onPointerOver = {handleHover} onPointerOut = {handleUnhover}>
          <mesh name="Artboard_4_copy_11@3x" geometry={nodes['Artboard_4_copy_11@3x'].geometry} material={materials.Icons} position={[-0.03, 0.24, -0.01]} scale={0.74} />
          <Html position = {[-.3, .3, .2]} className={hiddenClass}><h1>Livestock</h1></Html>
          {(props.hovered == "Livestock"|| quantities.includes("Livestock")) && 
          <Html center = {true} position = {[0, 0, -.4]} className="box_value"><h1>0.1 Gt C</h1></Html>
          }
        </mesh>

        <mesh name="Marine_Arthropods" geometry={nodes.Marine_Arthropods.geometry} material={highlighted.includes("Marine Arthropods") ? plant_material : materials.Bacteria} position={[0.03, -100, -0.08]} rotation={[Math.PI / 2, 0, 0]} scale={1.07} onPointerOver = {handleHover} onPointerOut = {handleUnhover}>
          <mesh name="Artboard_4_copy_6@3x" geometry={nodes['Artboard_4_copy_6@3x'].geometry} material={materials.Icons} position={[-0.02, 0.46, 0]} scale={0.99} />
          <Html zIndexRange={[0,1]} position = {[-.5, .5, .4]} className={hiddenClass}><h1>Marine Arthropods</h1></Html>
          {props.hovered == "Marine Arthropods" && 
          <Html center = {true} position = {[0, 0, -1]} className="box_value"><h1>0.9 Gt C</h1></Html>
          }
        </mesh>


        <mesh name="Mollusks" geometry={nodes.Mollusks.geometry} material={highlighted.includes("Mollusks") ? plant_material : materials.Bacteria} position={[-0.08, -100, -0.07]} rotation={[Math.PI / 2, 0, 0]} onPointerOver = {handleHover} onPointerOut = {handleUnhover}>
          <mesh name="Artboard_4_copy_14@3x" geometry={nodes['Artboard_4_copy_14@3x'].geometry} material={materials.Icons} position={[0, 0.33, -0.01]} scale={0.86} />
          <Html position = {[-.3, .5, .3]} className={hiddenClass}><h1>Mollusks</h1></Html>
          {props.hovered == "Mollusks" && 
          <Html  center = {true} position = {[0, 0, -0.7]} className="box_value"><h1>0.2 Gt C</h1></Html>
          }
        </mesh>


        <mesh name="Nematodes" geometry={nodes.Nematodes.geometry} material={highlighted.includes("Nematodes") ? plant_material : materials.Bacteria} position={[-0.01, -100, -0.4]} rotation={[Math.PI / 2, 0, 0]} onPointerOver = {handleHover} onPointerOut = {handleUnhover}>
          <mesh name="Artboard_4_copy_9@3x001" geometry={nodes['Artboard_4_copy_9@3x001'].geometry} material={materials.Icons} position={[0, 0.15, -0.01]} scale={0.42} />
          <Html position = {[-.3, .1, .1]} className={hiddenClass}><h1>Nematodes</h1></Html>
          {props.hovered == "Nematodes" && 
          <Html center = {true} position = {[0, 0, -.7]} className="box_value"><h1>0.02 Gt C</h1></Html>
          }

        </mesh>


        <mesh name="Wild_Birds" geometry={nodes.Wild_Birds.geometry} material={highlighted.includes("Wild Birds") ? plant_material : materials.Bacteria} position={[-0.07,-100, -0.07]} rotation={[Math.PI / 2, 0, 0]} onPointerOver = {handleHover} onPointerOut = {handleUnhover}>
          <mesh name="Artboard_4_copy_13@3x001" geometry={nodes['Artboard_4_copy_13@3x001'].geometry} material={materials.Icons} position={[0, 0.08, 0]} scale={0.22} />
          <Html position = {[0.0, .3, .2]} className={hiddenClass}><h1>Wild Birds</h1></Html>
          {(props.hovered == "Wild Birds" || quantities.includes("Wild Birds")) && 
          <Html center = {true} position = {[0, 0, -.4]} className="box_value"><h1>0.0002 Gt C</h1></Html>
          }
        </mesh>

        <mesh name="Wild_Mammals" geometry={nodes.Wild_Mammals.geometry} material={highlighted.includes("Wild Mammals") ? plant_material : materials.Bacteria} position={[-0.32, -100, -0.07]} rotation={[Math.PI / 2, 0, 0]}  onPointerOver = {handleHover} onPointerOut = {handleUnhover}>
          <mesh name="Artboard_4_copy_12@3x001" geometry={nodes['Artboard_4_copy_12@3x001'].geometry} material={materials.Icons} position={[0, 0.11, -0.01]} scale={0.23} />
          <Html position = {[-0.2, .2, .2]} className={hiddenClass}><h1>Wild Mammals</h1></Html>
          {(props.hovered == "Wild Mammals" || quantities.includes("Wild Mammals")) && 
          <Html center = {true} position = {[0, 0, -.3]} className="box_value"><h1>0.0007 Gt C</h1></Html>
          }
        </mesh>


        <mesh name="Archaea" receiveShadow castShadow geometry={nodes.Archaea.geometry} material={highlighted.includes("Archaea") ? plant_material : materials.Bacteria} position={[6.42, 2, -31.01  + 30]} rotation={[Math.PI / 2, 0, 0]}  onPointerOver = {handleHover} onPointerOut = {handleUnhover}>
          <mesh name="Artboard_4_copy_2@3x" geometry={nodes['Artboard_4_copy_2@3x'].geometry} material={materials.Icons} position={[0.05, 0.98, -0.05]} rotation={[0, 0, -0.01]} scale={1.17} />
          { props.counter == 10 &&
            <Html position = {[-0, 1, -1.4]} className={hiddenClass}><h1>Archaea</h1></Html>
          }
          {
            props.counter != 10 &&
            <Html position = {[-1, 1, 1]} className={hiddenClass}><h1>Archaea</h1></Html>

          }
          {props.hovered == "Archaea" && 
          <Html center = {true} position = {[0, 0, -1.6]} className="box_value"><h1>7 Gt C</h1></Html>
          }
        </mesh>

        <mesh name="Bacteria" receiveShadow  castShadow geometry={nodes.Bacteria.geometry} material={highlighted.includes("Bacteria") ? plant_material : materials.Bacteria} position={[4.63, 3.14, -34.55  + 30]} rotation={[Math.PI / 2, 0, 0]}  onPointerOver = {handleHover} onPointerOut = {handleUnhover}>
          <mesh name="Artboard_4@3x" geometry={nodes['Artboard_4@3x'].geometry} material={materials.Icons} position={[-0.02, 2.1, 0.09]} scale={1.87} />          
          <Html position = {[-2, 2.2, 2.1]} className={hiddenClass}><h1>Bacteria</h1></Html>
          {props.hovered == "Bacteria" && 
          <Html center = {true} position = {[0,0,-2.7]} className="box_value"><h1>70 Gt C</h1></Html>
          }
        </mesh>

        <mesh name="Fungi" receiveShadow castShadow geometry={nodes.Fungi.geometry} material={highlighted.includes("Fungi") ? plant_material : materials.Bacteria} position={[-0.72, 2.19, -31.07  + 30]} rotation={[Math.PI / 2, -Math.PI / 2, 0]}  onPointerOver = {handleHover} onPointerOut = {handleUnhover}>
          <mesh name="Artboard_4_copy_4@3x001" geometry={nodes['Artboard_4_copy_4@3x001'].geometry} material={materials.Icons} position={[0.03, 1.16, -0.02]} rotation={[0, Math.PI / 2, 0]} scale={1.26} />
          <Html position = {[1.2, 1, 1]} className={hiddenClass}><h1>Fungi</h1></Html>
          {props.hovered == "Fungi" && 
          <Html center = {true} position = {[-1.8, 0, 0]} className="box_value"><h1>12 Gt C</h1></Html>
          }
        </mesh>

        <mesh name="Protists" receiveShadow castShadow geometry={nodes.Protists.geometry} material={highlighted.includes("Protists") ? plant_material : materials.Bacteria} position={[7.86, 1.83, -29.2  + 30]} rotation={[Math.PI / 2, -Math.PI / 2, 0]}  onPointerOver = {handleHover} onPointerOut = {handleUnhover}>
          <mesh name="Artboard_4_copy_3@3x" geometry={nodes['Artboard_4_copy_3@3x'].geometry} material={materials.Icons} position={[-0.06, 0.81, 0.02]} rotation={[0, Math.PI / 2, 0]} scale={1.17} />
          {props.counter >= 10 &&

          <Html position = {[0, 0, -1.1]} className={hiddenClass}><h1>Protists</h1></Html>

          }
            {props.counter == 10 &&

            <Html position = {[-1.2, 1, .2]} className={hiddenClass}><h1>Protists</h1></Html>

            }
          {
            props.counter < 10 &&
            <Html position = {[+.75, 1, .8]} className={hiddenClass}><h1>Protists</h1></Html>
            
          }
          {props.hovered == "Protists" && 
          <Html center = {true} position = {[-1.5, 0,0]} className="box_value"><h1>4 Gt C</h1></Html>
          }
        </mesh>

        <mesh name="Plants" receiveShadow castShadow geometry={nodes.Plants.geometry} material={highlighted.includes("Plants") ? plant_material : materials.Bacteria} position={[-4.04, 4.81, -36.51  + 30]} rotation={[Math.PI / 2, -Math.PI / 2, 0]} scale={3.36} onPointerOver = {handleHover} onPointerOut = {handleUnhover}>
          <mesh name="Artboard_4_copy@3x" geometry={nodes['Artboard_4_copy@3x'].geometry} material={materials.Icons} position={[-0.04, 1.18, 0]} rotation={[0, Math.PI / 2, 0]} scale={0.54} />
          {props.counter >= 9 &&

            <Html position = {[-1.3, 1, 1]}className={hiddenClass}><h1>Plants</h1></Html>

          }
          
          {props.counter < 9 &&
            <Html position = {[+1.2, +1, +1.2]}className={hiddenClass}><h1>Plants</h1></Html>
          }
          {props.hovered == "Plants" && 
          <Html center = {true} position = {[-1.5, 0, 0]} className="box_value"><h1>450 Gt C</h1></Html>
          }
          
        </mesh>

        <mesh  name="Animals" receiveShadow v castShadow geometry={nodes.Animals.geometry} material={highlighted.includes("Animals") ? plant_material : materials.Bacteria} position={[0.73, 1.75, -29.04  + 30]} rotation={[Math.PI / 2, -Math.PI / 2, 0]} scale={0.63} onPointerOver = {handleHover} onPointerOut = {handleUnhover} frustumCulled = {false}>
          <mesh name="Cube" geometry={nodes.Cube.geometry} material={highlighted.includes("Animals") ? plant_material :  materials['Material.001']} position={[-1.14, -1.13, 0.02]} rotation={[-Math.PI / 2, 0, Math.PI / 2]} scale={[1.1, 0.02, 0.57]} />
          <mesh name="Cube001" geometry={nodes.Cube001.geometry} material={highlighted.includes("Animals") ? plant_material :  materials['Material.001']} position={[-1.14, 1.13, 0.02]} rotation={[Math.PI / 2, 0, -Math.PI / 2]} scale={[1.1, 0.02, 0.56]} />
          <mesh name="Cube002" geometry={nodes.Cube002.geometry} material={highlighted.includes("Animals") ? plant_material : materials['Material.001']} position={[-1.17, 0, 1.1]} rotation={[Math.PI, 0, 1.57]} scale={[1.1, 0.02, 0.49]} />
          <mesh name="Cube003" geometry={nodes.Cube003.geometry} material={highlighted.includes("Animals") ? plant_material :  materials['Material.001']} position={[-1.17, 0, -1.1]} rotation={[0, 0, -1.57]} scale={[1.1, 0.02, 0.49]} />


          {props.counter > 10 && 
              <Html position = {[1.2, 1, -1.2]} className={hiddenClass}><h1>Animals</h1></Html>

          }
          {props.counter < 10 && 
          <Html position = {[1.2, 1, 1.2]} className={hiddenClass}><h1>Animals</h1></Html>

          }
          {props.counter == 10 &&
          <Html position = {[-1.9, 1, 1.2]} className={hiddenClass}><h1>Animals</h1></Html>
          }

          {props.counter != null  &&
            <Html position = {[-1.9, 1, 1.2]} className={hiddenClass}><h1>Click me to open</h1></Html>
          }
          {props.hovered == "Animals" && props.counter < 9 && 
          <Html center = {true} position = {[-2, 0, 0]} className="box_value"><h1>2.6 Gt C</h1></Html>
          }
          {props.hovered == "Animals" && props.counter >= 9 && 
          <Html center = {true} position = {[0, 0, 2]} className="box_value"><h1>2.6 Gt C</h1></Html>
          }
          <mesh name="Artboard_4_copy_4@3x002" geometry={nodes['Artboard_4_copy_4@3x002'].geometry} material={materials.Icons} position={[-0.03, 1.19, -0.03]} rotation={[0, Math.PI / 2, 0]} scale={[1.78, 0.73, 0.44]} />

        </mesh>

        <mesh name="Virus" geometry={nodes.Virus.geometry} material={highlighted.includes("Viruses") ? plant_material : materials.Bacteria} position={[9.45, 1.43, 2.44]} rotation={[Math.PI / 2, 0, 0]} onPointerOver = {handleHover} onPointerOut = {handleUnhover}> 
          <mesh name="Plane003" geometry={nodes.Plane003.geometry} material={materials.Icons} position={[-0.01, 0.31, 0]} scale={0.22} />
          <Html position = {[-.3, 0.31, 0.3]}className={hiddenClass}><h1>Viruses</h1></Html>
          {props.hovered == "Virus" && 
          <Html center = {true} position = {[0, 0, -.7]} className="box_value"><h1>0.1 Gt C</h1></Html>
          }
        </mesh>

        <mesh name="LUNA" geometry={nodes.LUNA.geometry} material={materials['Material.004']} position={[1.83, -7.41, 1.37]} scale={0.51}>
          <mesh name="Plane002" geometry={nodes.Plane002.geometry} material={materials.Icons} position={[-0.02, -0.02, 1.06]} rotation={[Math.PI / 2, 0, 0]} scale={0.72} />
          <Html position = {[-1, -1, 0.9]}className="box_name"><h1>LUCA</h1></Html>

        </mesh>

        {props.counter < 2 &&
          <mesh name="Globe" ref = {globeRef} geometry={nodes.Globe.geometry} material={materials.Globe} position={[0.68, 13.43, 0]} rotation={[2.05, 0, 0]} scale={9.47} />
        }
        <mesh name="Plane001" geometry={nodes.Plane001.geometry} material={materials.Tree} position={[1.25, -4.05, 1.44]} rotation={[Math.PI / 2, 0, 0]} scale={[6.68, 3.04, 3.05]} />
        <mesh name="Plane"  geometry={nodes.Plane.geometry} material={materials.Rollout} position={[1.84, 17.04, -20.72]} rotation={[Math.PI / 2, 0, 0]} scale={0.72} />

      </group>
    </group>
  
  )
}

useGLTF.preload('Biomass_animation_v02.glb')

export default Anim
